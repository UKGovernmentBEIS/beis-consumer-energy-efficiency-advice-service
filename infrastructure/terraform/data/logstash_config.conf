input {
  tcp {
    port => 5000
    type => syslog
  }
}

# inspired by https://docs.cloud.service.gov.uk/monitoring_apps.html#configure-logstash-filters
filter {
    grok {
        # attempt to parse syslog lines
        match => { "message" => "(%{NONNEGINT:message_length} )?%{SYSLOG5424PRI}%{NONNEGINT:syslog_ver} (?:%{TIMESTAMP_ISO8601:syslog_timestamp}|-) +%{DATA:syslog_host} +%{UUID:cf_app_guid} +\[%{DATA:syslog_proc}\] +- +(\[tags@%{NONNEGINT} +%{DATA:cf_tags}\])? +%{GREEDYDATA:syslog_msg}" }
        tag_on_failure => ["_syslogparsefailure"]
    }

    # parse the syslog pri field into severity/facility
    syslog_pri { syslog_pri_field_name => 'syslog5424_pri' }

    # replace @timestamp field with the one from syslog
    date { match => [ "syslog_timestamp", "ISO8601" ] }

    # Cloud Foundry passes the app name, space and organisation in the syslog_host
    # Filtering them into separate fields makes it easier to query multiple apps in a single Kibana instance
    dissect {
        mapping => { "syslog_host" => "%{[cf][org]}.%{[cf][space]}.%{[cf][app]}" }
        tag_on_failure => ["_sysloghostdissectfailure"]
    }

    # Cloud Foundry gorouter logs
    if [syslog_proc] =~ "RTR" {
        mutate { replace => { "type" => "gorouter" } }
        grok {
            match => { "syslog_msg" => "%{HOSTNAME:[access][host]} - \[%{TIMESTAMP_ISO8601:router_timestamp}\] \"%{WORD:[access][method]} %{NOTSPACE:[access][url]} HTTP/%{NUMBER:[access][http_version]}\" %{NONNEGINT:[access][response_code]:int} %{NONNEGINT:[access][body_received][bytes]:int} %{NONNEGINT:[access][body_sent][bytes]:int} %{QUOTEDSTRING:[access][referrer]} %{QUOTEDSTRING:[access][agent]} \"%{HOSTPORT:[access][remote_ip_and_port]}\" \"%{HOSTPORT:[access][upstream_ip_and_port]}\" %{GREEDYDATA:router_keys}" }
            add_field => {"log_line" => "%{[access][method]} %{[access][response_code]} %{[access][url]}"}
            tag_on_failure => ["_routerparsefailure"]
        }
        # replace @timestamp field with the one from router access log
        date {
            match => [ "router_timestamp", "ISO8601" ]
        }
        kv {
            source => "router_keys"
            target => "router"
            value_split => ":"
            remove_field => "router_keys"
        }

        mutate {
          convert => {
            "[router][response_time]" => "float"
            "[router][gorouter_time]" => "float"
            "[router][app_index]" => "integer"
          }
        }
    }

    # Application logs
    if [syslog_proc] =~ "APP" {
        mutate {
          replace => { "type" => "app" }
        }
        if [cf][app] =~ /^dceas-user-site/ {
          grok {
            match => { "syslog_msg" => "((?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}))?( rid=%{UUID:rid})?%{GREEDYDATA:log_line}" }
            tag_on_failure => ["_usersiteparsefailure"]
          }
        } else {
          mutate {
            add_field => {"log_line" => "%{syslog_msg}"}
          }
        }
    }

    if [cf][app] =~ /^dceas-user-site/ {
      mutate { add_field => { "[@metadata][app]" => "dceas-user-site" } }
    } else if [cf][app] =~ /^dceas-admin-site/ {
      mutate { add_field => { "[@metadata][app]" => "dceas-admin-site" } }
    } else {
      mutate { add_field => { "[@metadata][app]" => "other" } }
    }
}


output {
  file {
    codec => line {
      format => "%{log_line}"
    }
    path => "/var/log/logstash/cloudfoundry/%{[cf][space]}/%{[@metadata][app]}.%{[type]}.log"
  }
}
