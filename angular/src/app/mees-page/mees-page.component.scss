@import "styles/page";
@import "styles/mixins/buttons";
@import "styles/mixins/font";
@import "styles/var/colors";
@import "~mathsass/dist/_constants";

// Component specific variables

// Component specific mixins

// General styling (shouldn't contain many widths/sizes etc.)
// TODO BEISDEAS-209 Combine this with questionnaire.component.scss
:host {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.questions-container {
  $greyed-out: #a9a9a9;

  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  flex-grow: 1;
  background-color: $lighter-grey;
  padding-bottom: 16px;

  .progress-indicator-component {
    $color-list: (
      #2a759c, $primary-blue, #52cea9, #78d523
    );

    $progress-indicator-height: 40px;

    display: flex;
    height: $progress-indicator-height;
    width: 100%;

    .progress-indicator {
      display: flex;
      flex-grow: 1;

      .pre-questionnaire-sections {
        background-color: nth($color-list, 1);
        flex: 1 1 auto;
      }

      .questionnaire-sections {
        background-color: #d8d8d8;
        max-width: $content-max-width;
        flex: 1 1 100%;
        display: flex;
      }

      .post-questionnaire-sections {
        background-color: #d8d8d8;
        flex: 1 1 auto;
      }

      .questionnaire-section {
        flex-grow: 1;
        display: flex;
        position: relative;
        align-items: center;

        &:not(:first-child) {
          padding-left: 20px;
        }

        &::after {
          position: absolute;
          top: 6px;
          right: calc(-1 * #{$progress-indicator-height} / (2 * #{$SQRT2}));
          content: '';
          transform: rotate(-45deg);
          width: calc(#{$progress-indicator-height} / #{$SQRT2});
          height: calc(#{$progress-indicator-height} / #{$SQRT2});
        }

        &.information-section {
          flex: 0 0 auto;
          text-transform: uppercase;
          color: white;
          font-size: 11px;
          font-weight: bold;
          padding-right: 18px;

          .journey-heading {
            margin-right: 35px;
          }

          .clock ::ng-deep svg {
            fill: white;
          }

          .time-needed {
            margin-left: 10px;
          }
        }

        @for $i from 1 through length($color-list) {
          &:nth-child(#{$i}) {
            z-index: #{10 - $i};
            background-color: nth($color-list, $i);

            &::after {
              background-color: nth($color-list, $i);
            }
          }
        }
      }
    }
  }

  .question-type-icon {
    margin-top: 15vh;
    margin-bottom: -4px;

    .house ::ng-deep svg {
      polygon {
        fill: $primary-blue;
      }

      polyline {
        stroke: $primary-blue;
      }
    }
  }

  .question-type-icon-baseline {
    background-color: $primary-blue;
    width: 140px;
    height: 1px;
    margin-bottom: 20px;
  }

  .question-heading-container {
    width: 100%;
  }

  .question-heading-container {
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    margin-bottom: 12px;
    width: 100%;

    > button {
      flex: 0 0 auto;
    }

    .question-heading {
      width: 100%;
      text-align: center;
      @include question-heading-font;
    }
  }

  .help-text {
    color: $focus-blue;
  }

  .question {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    padding-bottom: 16px;
  }

  app-question-reason {
    margin-top: auto;
  }
}

// Breakpoint specific styling
.questions-container {
  @include mobile() {
    padding: 40px;
    box-sizing: border-box;

    .progress-indicator-component {
      display: none;
    }

    .question-type-icon, .question-type-icon-baseline {
      display: none;
    }

    .question {
      width: 100%;
      margin-top: 30px;
    }

    .help-text {
      width: 100%;
    }
  }

  @include tablet() {
    padding: 68px 94px;
    box-sizing: border-box;

    .progress-indicator-component {
      display: none;
    }

    .question-type-icon, .question-type-icon-baseline {
      display: none;
    }

    .question {
      width: 100%;
      margin-top: 52px;
    }

    .help-text {
      width: 100%;
    }
  }

  @include desktop() {
    .question {
      width: 100vw;
      margin-top: 96px;
    }

    .help-text {
      width: 60vw;
      text-align: center;
    }

    app-question-reason {
      margin-bottom: 24px;
    }
  }
}
