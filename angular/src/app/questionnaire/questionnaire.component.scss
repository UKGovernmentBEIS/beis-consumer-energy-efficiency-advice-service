@import 'styles/mixins/buttons';
@import "styles/mixins/font";
@import "styles/var/colors";
@import "styles/page";

// Component specific variables
$greyed-out: #a9a9a9;

// Component specific mixins

// General styling (shouldn't contain many widths/sizes etc.)
:host {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.questions-container {

  .question-heading {
    font-size: 36px;
    font-weight: bold;
    color: $dark-blue;
    line-height: 38px;
    text-align: center;
    margin-bottom: 20px;
  }

  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  flex-grow: 1;
  background-color: $light-blue;

  .help-text {
    color: $dark-blue;
  }

  .question {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
  }

  app-question-reason {
    margin-top: auto;
  }
}
app-sticky-row-wrapper {
  z-index: 5;
  .sticky-row-content {
    padding: 20px;
    border-top: 2px $separator-grey solid;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 40px;

    .question-heading-container {
      padding-top: 15px;
      display: flex;
      align-items: baseline;
      justify-content: space-between;
      margin-bottom: 12px;

      > button {
        flex: 0 0 auto;
      }

      .question-heading {
        @include question-heading-font;
      }

      .left-arrow, .right-arrow {
        height: 48px;
        width: 48px;

        background-color: white;
        color: $greyed-out;
        fill: $greyed-out;

        display: flex;
        align-items: center;
        justify-content: center;

        border: none;

        user-select: none;
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        -o-user-select: none;

        .left-chevron-icon, .right-chevron-icon {
          width: auto;

          ::ng-deep svg {
            fill: $greyed-out;
            vertical-align: middle;
          }
        }

        &.hidden {
          display: none;
        }

        &:not([disabled]) {
          cursor: pointer;
        }
      }

      .left-arrow {
        padding-right: 10px;
      }

      .right-arrow {
        padding-left: 10px;

        &:not([disabled]) {
          background-color: $green;
          color: white;

          .right-chevron-icon ::ng-deep svg {
            fill: white;
          }
        }
      }
    }
  }
}

// Breakpoint specific styling
.questions-container {
  @include mobile() {
    padding: 40px 40px 0;
    box-sizing: border-box;

    .question-type-icon, .question-type-icon-baseline {
      display: none;
    }

    .question-heading-container {
      .question-heading {
        width: 100%;
      }

      .right-arrow, .left-arrow {
        display: none;
      }
    }

    .question {
      width: 100vw;
      margin-top: 30px;
    }

    .help-text {
      width: 100%;
    }

    :last-child {
      margin-bottom: 30px;
    }
  }

  @include tablet() {
    padding: 68px 94px 0;
    box-sizing: border-box;

    .question-type-icon, .question-type-icon-baseline {
      display: none;
    }

    .question-heading-container {
      .question-heading {
        width: 100%;
      }

      .right-arrow, .left-arrow {
        display: none;
      }
    }

    .question {
      width: 100vw;
      margin-top: 52px;
    }

    .help-text {
      width: 100%;
    }

    :last-child {
      margin-bottom: 30px;
    }
  }

  @include desktop() {
    .question-heading {
      width: 100%;
      padding: $desktop-side-margin;
      box-sizing: border-box;
      margin: 0;
    }

    .question {
      width: 100vw;
      margin-top: 30px;
    }

    .help-text {
      width: 60vw;
      text-align: center;
    }

    :last-child {
      margin-bottom: 30px;
    }
  }
}